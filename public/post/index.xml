<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog</title>
    <link>https://bennycwong.github.io/post/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Aug 2016 12:41:17 -0700</lastBuildDate>
    <atom:link href="https://bennycwong.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Multiple DBs in Phoenix</title>
      <link>https://bennycwong.github.io/post/multiple-dbs-in-phoenix/</link>
      <pubDate>Sat, 20 Aug 2016 12:41:17 -0700</pubDate>
      
      <guid>https://bennycwong.github.io/post/multiple-dbs-in-phoenix/</guid>
      <description>

&lt;p&gt;The first phoenix project I&amp;rsquo;ve worked on is an internal tool at Dollar Shave Club. It connects to our existing database and does some work on it.&lt;/p&gt;

&lt;p&gt;Now that the application is up and running, I&amp;rsquo;m starting to explore how to handle user authentication and logging of who made what changes, but without touching our main database.&lt;/p&gt;

&lt;p&gt;I want to setup a separate database for this internal application.&lt;/p&gt;

&lt;p&gt;It turns out it&amp;rsquo;s pretty trivial to setup a second database in Phoenix.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s are the steps.&lt;br /&gt;
In this example, I&amp;rsquo;m going to define &lt;strong&gt;Repo&lt;/strong&gt; as my main database, and a &lt;strong&gt;RepoPostgres&lt;/strong&gt;, a postgres DB that I&amp;rsquo;m using the handle concerns that are unrelated to to main database&lt;/p&gt;

&lt;h4 id=&#34;1-define-the-second-database-in-your-config-file:32fd4cc1d30787d390c7c8a79d66130f&#34;&gt;1. Define the second database in your config file:&lt;/h4&gt;

&lt;p&gt;//project/config/{env}.exs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Configure your database
config :demo, Demo.Repo,
  adapter: Ecto.Adapters.MySQL,
  username: &amp;quot;root&amp;quot;,
  password: &amp;quot;root&amp;quot;,
  database: &amp;quot;demo_dev&amp;quot;,
  hostname: &amp;quot;localhost&amp;quot;,
  pool_size: 10

config :demo, Demo.RepoPostgres,
  adapter: Ecto.Adapters.Postgres,
  username: &amp;quot;postgres&amp;quot;,
  password: &amp;quot;postgres&amp;quot;,
  database: &amp;quot;demo_dev&amp;quot;,
  hostname: &amp;quot;localhost&amp;quot;,
  pool_size: 10

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-create-a-new-repo-file-in-lib:32fd4cc1d30787d390c7c8a79d66130f&#34;&gt;2. Create a new repo file in lib&lt;/h4&gt;

&lt;p&gt;//project/lib/demo/repo_postgres.ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defmodule Demo.RepoPostgres do
  use Ecto.Repo, otp_app: :demo
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-add-the-new-database-repo-in-supervision-tree-on-app-start:32fd4cc1d30787d390c7c8a79d66130f&#34;&gt;3. Add the new database repo in supervision tree on app start&lt;/h4&gt;

&lt;p&gt;//project/lib/demo.ex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;children = [
      # Start the Ecto repository
      supervisor(Demo.Repo, []),
      supervisor(Demo.RepoPostgres, []), #&amp;lt;---- Add new line here

      # Start the endpoint when the application starts
      supervisor(Demo.Endpoint, []),
      # Start your own worker by calling: Demo.Worker.start_link(arg1, arg2, arg3)
      # worker(Demo.Worker, [arg1, arg2, arg3]),
    ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-use-it:32fd4cc1d30787d390c7c8a79d66130f&#34;&gt;4. Use it!&lt;/h4&gt;

&lt;p&gt;In any place where you want to use the second database, simply use that module.&lt;/p&gt;

&lt;p&gt;For example, the controller:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defmodule Demo.UserController do
  use Demo.Web, :controller
  alias Demo.User
  alias Demo.RepoPostgres

  def index(conn, _params) do
    users = RepoPostgres.all(User)
    render conn, &amp;quot;index.html&amp;quot;, users: users
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;conclusion:32fd4cc1d30787d390c7c8a79d66130f&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;I think this is one of the a-ha moments in my journey using elixir.&lt;/p&gt;

&lt;p&gt;After reading through the first half of &lt;a href=&#34;https://pragprog.com/book/phoenix/programming-phoenix&#34;&gt;Programming Phoenix by Chris McCord&lt;/a&gt;, I theorized that this is how one would add a second database. And it turns how, that&amp;rsquo;s exactly how to do it. It was a trivial amount of work, and it was easy to reason about.&lt;/p&gt;

&lt;p&gt;There were no surprises.&lt;/p&gt;

&lt;p&gt;It worked as expected.&lt;/p&gt;

&lt;p&gt;I think this is &lt;a href=&#34;https://en.wikipedia.org/wiki/Principle_of_least_astonishment&#34;&gt;Principle of Least Astonishment (POLA)&lt;/a&gt;  in action.&lt;/p&gt;

&lt;p&gt;Hats off to the Phoenix and Ecto teams for making this so simple, and to Chris for his excellent book.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Puzzle  |&gt; Simulations in Elixir</title>
      <link>https://bennycwong.github.io/post/riddler-simulations-in-elixir/</link>
      <pubDate>Sat, 13 Aug 2016 11:20:18 -0700</pubDate>
      
      <guid>https://bennycwong.github.io/post/riddler-simulations-in-elixir/</guid>
      <description>

&lt;p&gt;For the past few months, I have learning the &lt;a href=&#34;http://elixir-lang.org/&#34;&gt;elixir&lt;/a&gt; programming language. Much has been written about Elixir, so I won&amp;rsquo;t go into too much details about the language itself.&lt;/p&gt;

&lt;p&gt;Instead, I want to share my journey learning elixir. The first stage of my programming language learning is writing a lot of code, with little to no self consciousness about writing &amp;ldquo;bad code&amp;rdquo;. This is in no way the best way to write elixir (probably), but it&amp;rsquo;s the first step to take me from &lt;strong&gt;knowing about&lt;/strong&gt; something to &lt;strong&gt;knowing something&lt;/strong&gt;. I plan to revisit these in the future as I learn more through programming more in elixir.&lt;/p&gt;

&lt;h4 id=&#34;the-riddler:f20b5269d4afb8ee8f2457a6c3dfcc79&#34;&gt;The Riddler&lt;/h4&gt;

&lt;p&gt;The Riddler is a series of puzzles written by the folks at &lt;a href=&#34;https://fivethirtyeight.com/tag/the-riddler/&#34;&gt;Five Thirty Eight&lt;/a&gt;. Every week or so, they publish a new riddle, as well as post answers to the previous week&amp;rsquo;s puzzles.&lt;/p&gt;

&lt;p&gt;The riddles/puzzles are statistical of nature. The answer is usually a math formula or some way to express the probability or expected value of it.&lt;/p&gt;

&lt;p&gt;I think there are two ways to solve these problems.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Think about the problem like a statistician and break down the problem in its own smaller components. Solve for the expected value and probability. Finally combine it all together.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build a simulation and run it a lot of times.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the first approach is probably the smarter way to go, building simulations is fun. Plus, if the proof is in the pudding. If my simulation is done right, it becomes the test case to &lt;strong&gt;verify the math from the first approach&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Below are two simulations I wrote in Elixir to solve the puzzles on &lt;a href=&#34;https://fivethirtyeight.com/tag/the-riddler/&#34;&gt;The Riddler at fivethirtyeight&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;writing-simulations:f20b5269d4afb8ee8f2457a6c3dfcc79&#34;&gt;Writing Simulations&lt;/h4&gt;

&lt;p&gt;I often hear this advice: you learn more when you build your own projects, instead of just following along with tutorials. This gives us two advantage: you care more about building it, thus sustaining your &lt;strong&gt;motivation&lt;/strong&gt;, and it requires you to do more than just follow steps. &lt;strong&gt;It makes you think.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have observed this to be true. However, coming up with what projects to write is hard work. Seriously hard work. People do this as a career (Product Management).&lt;/p&gt;

&lt;p&gt;The hard work of trying to figure out what to build is &lt;strong&gt;not necessary when the purpose of the project is to learn a new technologies&lt;/strong&gt;. Hard problems are good, but we need to focus on the right problems.&lt;/p&gt;

&lt;p&gt;Since my goal at this phase of learning elixir is writing a lot of programs, I needed a problem that is already defined. Riddler puzzles are great because the problem is given to me. I don&amp;rsquo;t have to spend energy trying to figure out &lt;strong&gt;what&lt;/strong&gt; to write. I just need to figure out &lt;strong&gt;how&lt;/strong&gt; to write it.&lt;/p&gt;

&lt;p&gt;Also, I really like brain teasers and puzzles. These kinds of problems are &lt;strong&gt;fun for me&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In addition, the fine folks at fivethirtyeight also provide modifications to the problem. This gives a chance to try and refactor and change my code. This is a good time to see how well I abstracted the code. Is it easy to change, or did I have to rewrite the code?&lt;/p&gt;

&lt;p&gt;My goal here is not to write the best code, develop a product, or anything of the sort. I&amp;rsquo;m trying to apply the concepts learned from the getting started guides and use them enough so that when I read about these topics, I have an intuitive understanding and context to lean on.&lt;/p&gt;

&lt;h3 id=&#34;the-riddles:f20b5269d4afb8ee8f2457a6c3dfcc79&#34;&gt;The Riddles&lt;/h3&gt;

&lt;h4 id=&#34;elevator-button-problem:f20b5269d4afb8ee8f2457a6c3dfcc79&#34;&gt;Elevator Button Problem&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://fivethirtyeight.com/features/can-you-solve-this-elevator-button-puzzle/&#34;&gt;Click here to see the Elevator Button riddle on Riddler&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a buildingâ€™s lobby, some number (N) of people get on an elevator that goes to some number (M) of floors. There may be more people than floors, or more floors than people. Each person is equally likely to choose any floor, independently of one another. When a floor button is pushed, it will light up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/bennycwong/riddler/tree/master/elevator_button&#34;&gt;See simulation code and results&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mix elevator.simluate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/4430436/17579892/af24cf12-5f4e-11e6-9f19-be9357d70f2c.gif&#34; alt=&#34;Elevantor&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;the-grizzly-bear-problem:f20b5269d4afb8ee8f2457a6c3dfcc79&#34;&gt;The Grizzly Bear Problem&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://fivethirtyeight.com/features/should-the-grizzly-bear-eat-the-salmon/&#34;&gt;Click here to see the Grizzly Problem on Riddler&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A grizzly bear stands in the shallows of a river during salmon spawning season. Precisely once every hour, a fish swims within its reach. The bear can either catch the fish and eat it, or let it swim past to safety. This grizzly is, as many grizzlies are, persnickety. Itâ€™ll only eat fish that are at least as big as every fish it ate before.&lt;/p&gt;

&lt;p&gt;Each fish weighs some amount, randomly and uniformly distributed between 0 and 1 kilogram. (Each fishâ€™s weight is independent of the others, and the skilled bear can tell how much each weighs just by looking at it.) The bear wants to maximize its intake of salmon, as measured in kilograms. Suppose the bearâ€™s fishing expedition is two hours long. Under what circumstances should it eat the first fish within its reach? What if the expedition is three hours long?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/bennycwong/riddler/tree/master/grizzly_problem&#34;&gt;See simulation code and results&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mix grizzly.simluate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/bennycwong/riddler/raw/master/grizzly_problem/mix_grizzly_simulate.gif&#34; alt=&#34;mix grizzly.simulate&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Rebase: Getting Started</title>
      <link>https://bennycwong.github.io/post/git-rebase-getting-started/</link>
      <pubDate>Wed, 03 Aug 2016 19:19:37 -0700</pubDate>
      
      <guid>https://bennycwong.github.io/post/git-rebase-getting-started/</guid>
      <description>

&lt;p&gt;From my experience teaching newer developers how to use &lt;u&gt;&lt;strong&gt;git&lt;/strong&gt;&lt;/u&gt; in our workflow at Dollar Shave Club, the &lt;u&gt;&lt;strong&gt;rebase&lt;/strong&gt;&lt;/u&gt; feature tends to be one of the most confusing.
I remember having a hard time wrapping my head around it for a while.
This is my attempt at explaining what &lt;u&gt;&lt;strong&gt;rebase&lt;/strong&gt;&lt;/u&gt; is, as I would&amp;rsquo;ve liked to have been taught.*&lt;/p&gt;

&lt;h2 id=&#34;a-star-wars-illustration-analogy:702faf315c6b59cc55b18aa5ea562949&#34;&gt;A. Star Wars illustration (Analogy)&lt;/h2&gt;

&lt;p&gt;You are playing the (fictional) latest open-world alternate universe Star Wars game.
In this game, there are dozens of worlds to explore, and in each level, you can gather all sorts of loot. You can &lt;u&gt;&lt;strong&gt;save&lt;/strong&gt;&lt;/u&gt; game at any time.&lt;/p&gt;

&lt;h5 id=&#34;the-save-feature-is-git-it-s-a-way-to-store-the-history-of-your-game-and-how-you-go-to-where-you-are-in-git-we-call-these-saves-u-commits-u:702faf315c6b59cc55b18aa5ea562949&#34;&gt;The save feature is git. It&amp;rsquo;s a way to store the history of your game and how you go to where you are. In git, we call these saves &lt;u&gt;commits&lt;/u&gt;.&lt;/h5&gt;

&lt;p&gt;What makes this game open-world is that you can choose which which world (level) to go to in whatever order you want. You can go from Naboo, then to Endor, and then back to Hoth.&lt;/p&gt;

&lt;h5 id=&#34;being-in-the-open-world-is-like-having-branches-from-one-of-your-saves-you-can-branch-out-and-beat-levels-however-you-want-based-on-a-certain-previous-save:702faf315c6b59cc55b18aa5ea562949&#34;&gt;Being in the open world is like having branches. From one of your saves, you can branch out and beat levels however you want based on a certain previous save.&lt;/h5&gt;

&lt;p&gt;For example, for the first part of the game, our saves look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Level 1 (Naboo) -&amp;gt; Level 2 (Coruscant) -&amp;gt; Level 3 (Kashyyyk)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, you saved the games 3 times, and is on game &lt;u&gt;&lt;strong&gt;save #3&lt;/strong&gt;&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;Next, you decide you want to jump to Level 10, The Death Star.&lt;/p&gt;

&lt;p&gt;Midway through the level 10 (The Death Star) level would be a lot easier to drop bombs in this exhaust shaft if you were in an X-Wing Fighter.
In order to get the X-Wing, you need to beat level 7 (Yavin 4).
Getting to this point in the death star was a lot of hard work involving some precise dodging of Tie Fighters that you don&amp;rsquo;t want to do again.&lt;/p&gt;

&lt;p&gt;You decide to save the game here.
This is &lt;u&gt;&lt;strong&gt;save #4&lt;/strong&gt;&lt;/u&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Level 3 (Kashyyyk) -&amp;gt; Mid Way Through Level 10 (The Death Star)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We call the above play-through &lt;u&gt;&lt;strong&gt;the feature branch&lt;/strong&gt;&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;Now, you decide to start at &lt;u&gt;&lt;strong&gt;Save #3&lt;/strong&gt;&lt;/u&gt; and beat level 6 and 7, where you gain some force powers and an X-Wing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Level 3 (Kashyyyk) -&amp;gt; Level 6 (Tatooine) -&amp;gt; Level 7 (Yavin 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We call the above play-through &lt;u&gt;&lt;strong&gt;the master branch&lt;/strong&gt;&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;The game consider these two &lt;u&gt;&lt;strong&gt;branches&lt;/strong&gt;&lt;/u&gt; completely different play-throughs.&lt;/p&gt;

&lt;p&gt;One amazing feature the game developers created was to let you &lt;u&gt;&lt;strong&gt;combine&lt;/strong&gt;&lt;/u&gt; these branches as if it was one play-through.&lt;/p&gt;

&lt;p&gt;There are two strategies to combine the play-throughs: &lt;u&gt;&lt;strong&gt;merge&lt;/strong&gt;&lt;/u&gt; and &lt;u&gt;&lt;strong&gt;rebase&lt;/strong&gt;&lt;/u&gt;.&lt;/p&gt;

&lt;h4 id=&#34;1-merge:702faf315c6b59cc55b18aa5ea562949&#34;&gt;1. Merge&lt;/h4&gt;

&lt;p&gt;Using this strategy, you would be in &lt;u&gt;&lt;strong&gt;save #4 in the feature branch&lt;/strong&gt;&lt;/u&gt; and merging in &lt;u&gt;&lt;strong&gt;save #5 in the master branch&lt;/strong&gt;&lt;/u&gt;. Practically, it&amp;rsquo;s as if you were in the middle of your fight in the Death Star, and then teleported to Level 5 (Tatooine) and Level 6 (Yevin 4), got your force skills and the X-wing, and teleported back into the heat of battle with the Death Star in your new X-wing.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the new history:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Level 3 (Kashyyyk) -&amp;gt; Mid Way Through Level 10 (The Death Star) -&amp;gt; Level 6 (Tatooine) -&amp;gt; Level 7 (Yavin) -&amp;gt; Merge Save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that there&amp;rsquo;s an extra bit of history at end. In the git world. this is called a merge commit.&lt;/p&gt;

&lt;p&gt;In this example, we are merging&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(the master branch) --&amp;gt; (the feature branch)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the command line, you would do the following
(assuming you are in the feature branch):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git merge {repo} branch-b  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;2-rebase:702faf315c6b59cc55b18aa5ea562949&#34;&gt;2. Rebase&lt;/h4&gt;

&lt;p&gt;Rebasing, unlike merging, is rewinding to a common point in history, and then applying the history of the target branch, and then applying the history of the current branch.&lt;/p&gt;

&lt;p&gt;In our Star Wars example, rebasing &lt;u&gt;&lt;strong&gt;save #4 in the feature branch&lt;/strong&gt;&lt;/u&gt; with &lt;u&gt;&lt;strong&gt;save #5 in the master branch&lt;/strong&gt;&lt;/u&gt; is stopping in the middle of the Death Star battle, rewinding time to Level 3 (Kashyyyk), playing through Level 6 and 7, and then going through Level 10 (The Death Star) all the way to the point in &lt;u&gt;&lt;strong&gt;save #4&lt;/strong&gt;&lt;/u&gt;, as if it was on the same play-through.&lt;/p&gt;

&lt;p&gt;To illustrate this, we are doing this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Level 3 (Kashyyyk) -&amp;gt; Level 6 (Tatooine) -&amp;gt; Level 7 (Yavin 4) -&amp;gt; Mid Way Through Level 10 (The Death Star)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that there is no extra &lt;u&gt;&lt;strong&gt;merge commit&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;In the command line, you would do the following
(assuming you are in the feature branch):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase {repo} branch-b
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;b-rebase-vs-merge-visualized-diagram:702faf315c6b59cc55b18aa5ea562949&#34;&gt;B. Rebase vs Merge Visualized (Diagram)&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a visual representation of what the game saves.&lt;/p&gt;

&lt;h5 id=&#34;branches-play-throughs:702faf315c6b59cc55b18aa5ea562949&#34;&gt;Branches (Play-throughs)&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://www.atlassian.com/git/images/tutorials/advanced/merging-vs-rebasing/01.svg&#34; alt=&#34;branch&#34; /&gt;
Legend:&lt;br /&gt;
White &amp;ndash; Your history up till  &lt;u&gt;&lt;strong&gt;save #3&lt;/strong&gt;&lt;/u&gt;.&lt;br /&gt;
Green &amp;ndash; Your progress in level 10 (The Death Star) &lt;u&gt;&lt;strong&gt;save #4&lt;/strong&gt;&lt;/u&gt;.&lt;br /&gt;
Blue &amp;ndash; Your saved game after beating level 6 (Tatooine) and 7 (Yavin)  &lt;u&gt;&lt;strong&gt;save #5&lt;/strong&gt;&lt;/u&gt;.&lt;/p&gt;

&lt;h5 id=&#34;merge-strategy:702faf315c6b59cc55b18aa5ea562949&#34;&gt;Merge Strategy&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://www.atlassian.com/git/images/tutorials/advanced/merging-vs-rebasing/02.svg&#34; alt=&#34;merge&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;rebase-strategy:702faf315c6b59cc55b18aa5ea562949&#34;&gt;Rebase Strategy&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://www.atlassian.com/git/images/tutorials/advanced/merging-vs-rebasing/03.svg&#34; alt=&#34;rebase&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;c-repo-to-practice-example:702faf315c6b59cc55b18aa5ea562949&#34;&gt;C. Repo To Practice (Example)&lt;/h2&gt;

&lt;p&gt;For practice, I&amp;rsquo;ve created a demo repo for you to play with.&lt;br /&gt;
Check it out here: &lt;a href=&#34;https://github.com/bennycwong/git-rebase-practice&#34;&gt;git-rebase-practice&lt;/a&gt; on github.&lt;/p&gt;

&lt;p&gt;Note: The $ sign is the command prompt&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:bennycwong/git-rebase-practice.git
$ cd git-rebase-practice
$ git checkout master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, take a look at the log.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --oneline

1b4583c mid way through level 10
93077bc level 3 complete
efcf95f level 2 complete
ad638fb level 1 complete
f295f6c intial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now try to merge feature into master and the take a look at the logs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git merge origin/feature
$ git log --oneline

facb4e5 Merge branch &#39;feature&#39;
4166d41 level 7 complete
87ef0c0 level 6 complete
1b4583c mid way through level 10
93077bc level 3 complete
efcf95f level 2 complete
ad638fb level 1 complete
f295f6c intial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, reset your branch (don&amp;rsquo;t worry if you don&amp;rsquo;t understand this)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git reset --hard 1b4583c   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then rebase and the take a look at the logs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rebase origin/feature
First, rewinding head to replay your work on top of it...
Applying: mid way through level 10

$ git log
4cea1be mid way through level 10
4166d41 level 7 complete
87ef0c0 level 6 complete
93077bc level 3 complete
efcf95f level 2 complete
ad638fb level 1 complete
f295f6c intial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you run this in your terminal. Notice that the commit SHAs are now complete different than they were in the merge. This is because we are writing new history.&lt;/p&gt;

&lt;p&gt;Definitely play around in your own terminal and try merging/rebasing master into the feature branch. If you get to a state that&amp;rsquo;s too broken, you can always delete the repo and try again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ..
$ rm -rf git-rebase-practice
$ git clone git@github.com:bennycwong/git-rebase-practice.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;d-so-why-is-it-called-rebasing-plain-english:702faf315c6b59cc55b18aa5ea562949&#34;&gt;D. So why is it called rebasing? (Plain English)&lt;/h2&gt;

&lt;p&gt;Here is a helpful heuristic to remember rebasing means. Think of this as literally re-&lt;strong&gt;base&lt;/strong&gt;-ing something. You are changing what your current branch is &lt;strong&gt;based&lt;/strong&gt; on.&lt;/p&gt;

&lt;p&gt;Another way to put it, rebase is going back in time and changing history according to another timeline before apply my changes in this current timeline.&lt;/p&gt;

&lt;h2 id=&#34;e-learn-more-technical-definition:702faf315c6b59cc55b18aa5ea562949&#34;&gt;E. Learn More (Technical Definition)&lt;/h2&gt;

&lt;p&gt;If you want to learn more about this topic, Atlassian has a great git tutorial series &lt;a href=&#34;https://www.atlassian.com/git/tutorials/merging-vs-rebasing/summary&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;appendix-a-the-adept-method:702faf315c6b59cc55b18aa5ea562949&#34;&gt;*Appendix A: The ADEPT Method&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m currently learning how to apply the &lt;a href=&#34;https://betterexplained.com/articles/adept-method/&#34;&gt;ADEPT Method&lt;/a&gt; of teaching.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
  &lt;img src=&#34;https://betterexplained.com/wp-content/uploads/adept/adept-method.png&#34; alt=&#34;ADEPT&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;appendix-b-so-what-about-conflicts:702faf315c6b59cc55b18aa5ea562949&#34;&gt;Appendix B: So what about conflicts?&lt;/h2&gt;

&lt;p&gt;Conflicts happen whether you merge or rebase. Look for a post in the future that discuss this topic further&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing ember-router-scroll</title>
      <link>https://bennycwong.github.io/post/ember-router-scroll/</link>
      <pubDate>Mon, 01 Aug 2016 22:23:24 -0800</pubDate>
      
      <guid>https://bennycwong.github.io/post/ember-router-scroll/</guid>
      <description>&lt;hr /&gt;

&lt;p&gt;&lt;center&gt;
&lt;strong&gt;Editorial Note:&lt;/strong&gt; I originally wrote this post for the &lt;a href=&#34;http://engineering.dollarshaveclub.com/introducing-ember-router-scroll/&#34;&gt;DSC Engineering Blog&lt;/a&gt;.  Head over to there and check out the original.  While youâ€™re there, have a look at the other articles.
&lt;/center&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Here at Dollar Shave Club, we rely heavily on open-source technologies.
We chose Ember.js as our front end framework to build our web experience.&lt;/p&gt;

&lt;p&gt;By design, Ember maintains scroll position when transitioning between routes.
This makes sense for typical single page applications (SPAs), as SPAs tend to be rendered with nested views.
If a nested view is 1000px down the page, when you enter that nested route, you would want to still be 1000px down the page.&lt;/p&gt;

&lt;p&gt;However, our design calls for rendering pages in a non-nested fashion.
The default Ember behavior of maintaining scroll position is no longer the right user experience (UX).&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://cloud.githubusercontent.com/assets/4430436/17122972/0a1fe454-5295-11e6-937f-f1f5beab9d6b.gif&#34; alt=&#34;Default ember scroll behavior&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;As a result, one of the first pieces of Ember code written here at Dollar Shave Club is a way to scroll the user to the top of the page on route transition.&lt;/p&gt;

&lt;p&gt;Unfortunately, this presents a new UX problem.
While scroll-to-top is good UX for entering a new route, a user would expect to maintain scroll position when going back and forward in the browser.&lt;/p&gt;

&lt;p&gt;To solve this problem, we created a &lt;code&gt;scrollMap&lt;/code&gt; to store scroll states on &lt;code&gt;willTransition&lt;/code&gt;, a hook that gets called whenever a user leaves a route.
In the &lt;code&gt;didTransition&lt;/code&gt; hook, we check to see if the transition was triggered by a browser history event (&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events/popstate&#34;&gt;popstate event&lt;/a&gt;).
If a popstate is detected, the user is sent to the scroll position in the &lt;code&gt;scrollMap&lt;/code&gt; instead of the top.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://cloud.githubusercontent.com/assets/4430436/17122970/07c1a3a0-5295-11e6-977f-37eb955d95b1.gif&#34; alt=&#34;ember-router-scroll behavior&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Check it out here: &lt;a href=&#34;https://github.com/dollarshaveclub/ember-router-scroll&#34;&gt;ember-router-scroll&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>